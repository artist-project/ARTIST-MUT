--/*******************************************************************************
-- * Copyright (c) 2014 Vienna University of Technology.
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- * Alexander Bergmayr (Vienna University of Technology) - initial API and implementation
-- *
-- * Initially developed in the context of ARTIST EU project www.artist-project.eu
-- *******************************************************************************/
-- @atlcompiler emftvm
-- @nsURI SIMM=http://eu.artist.migration.mut.slicing/sim
-- @nsURI UMLMM=http://www.eclipse.org/uml2/4.0.0/UML

module objectstructure2classstructureselector;
create SLICESELECTION : UMLMM refining MODEL : UMLMM, SP : UMLMM, SIM : SIMM;

helper def: Objects: Sequence(UMLMM!InstanceSpecification) = UMLMM!InstanceSpecification.allInstancesFrom('SP');

helper def: SlicingProfile: UMLMM!Profile = UMLMM!Profile.allInstancesFrom('SP')->first();

helper def: Keep: UMLMM!Stereotype = thisModule.Stereotypes -> any(s | s.qualifiedName = 'slicerprofile::eu::artist::migration::mut::slicing::Keep');

helper def: intent: SIMM!SlicingIntent = SIMM!SlicingIntent.allInstancesFrom('SIM')->first();

-- TODO: probably we should have only one criterion for a slicing intent
helper def: annotations : Set(UMLMM!Stereotype) = thisModule.intent.criteria->first().element.asSet();

rule Element2Element {
	from s : UMLMM!Element in MODEL (thisModule.annotations->intersection(s.getAppliedStereotypes().asSet())->notEmpty()) 
	to t : UMLMM!Element
	do {
		if(not s.resolve().isStereotypeApplied(thisModule.Keep)) {	
			-- check if the SP is applied
			if(not s.getModel().resolve().isProfileApplied(thisModule.SlicingProfile)) {
				s.getModel().resolve().applyProfile(thisModule.SlicingProfile);
			}
			s.resolve().debug('Annotation2ClassStructureSelection');
			s.resolve().applyStereotype(thisModule.Keep);
		}
	}
}
