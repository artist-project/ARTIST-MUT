-- @atlcompiler emftvm
-- @nsURI UML2=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI profile=http://www.eclipse.org/uml2/4.0.0/UML

-------------------------------------------------------------------------------
--- Copyright (c) 2014 ATOS S.A.
--- All rights reserved. This program and the accompanying materials
--- are made available under the terms of the Eclipse Public License v1.0
--- which accompanies this distribution, and is available at
--- http://www.eclipse.org/legal/epl-v10.html
---
--- Contributors:
---     Jesús Gorroñogoitia - main development
--- 	Burak Karaboga - main development
---		Javier Garcia - main development
---
--- Initially developed in the context of ARTIST EU project www.artist-project.eu    
---    
-------------------------------------------------------------------------------

library DotNetComponentModel;
uses "lib::DotNet";


--- contains all profiles that describe components
helper def : AllComponentStereotypes() : Set(UML2!Stereotype) = Set{
	thisModule.remoteObjectStereotype, 
	thisModule.serviceHostStereotype,
	thisModule.SOLRStereotype
};

---******************************** DotNet Profile Queries ************************************---
--- detected view stereotyped classes
helper def: remoteObjectStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.remoteObjectStereotype))-> debug ('remote objects');

--- detected wcfService stereotyped classes
helper def: serviceHostStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.serviceHostStereotype))-> debug ('service hosts');


---****************** DotNet Profile Queries for Third Party Stereotypes *******************---

--- detected concrete service application stereotyped classes
helper def: SOLRStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.SOLRStereotype))-> debug ('SOLR clients');

---*************************** Generic Components ******************************---
--- Collects components to be obtained by the transformation, described by:
--- stereotype: that characterises the classes to be included within the component
--- classes: classes to be added to the component, organized by package
--- merge: whether or not to create a single component for all classes (true) or individual components for each class (false)
--- subGroupStereotype: which characterises the components (within nested packages) to be included as aggregations of this component.
helper def : components() : 
	Map (UML2!Stereotype, TupleType (classes:Map (UML2!Package, Sequence (UML2!Class)), merge:Boolean, subGroupStereotype:UML2!Stereotype)) = 
	Map {
		 (thisModule.remoteObjectStereotype, 
		  Tuple{classes=thisModule.organizedByPackage(thisModule.remoteObjectStereotypedClasses), merge=true, subGroupStereotype=OclUndefined}),

		 (thisModule.serviceHostStereotype, 
		 Tuple{classes=thisModule.organizedByPackage(thisModule.serviceHostStereotypedClasses), merge=true, subGroupStereotype=OclUndefined}),
		 
		 (thisModule.SOLRStereotype, 
		 Tuple{classes=thisModule.organizedByPackage(thisModule.SOLRStereotypedClasses), merge=true, subGroupStereotype=OclUndefined})
		 
	};