-- @atlcompiler emftvm
-- @nsURI UML2=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI profile=http://www.eclipse.org/uml2/4.0.0/UML

-------------------------------------------------------------------------------
--- Copyright (c) 2014 ATOS S.A.
--- All rights reserved. This program and the accompanying materials
--- are made available under the terms of the Eclipse Public License v1.0
--- which accompanies this distribution, and is available at
--- http://www.eclipse.org/legal/epl-v10.html
---
--- Contributors:
---     Jesús Gorroñogoitia - main development
--- 	Burak Karaboga - main development
---		Javier Garcia - main development
---
--- Initially developed in the context of ARTIST EU project www.artist-project.eu    
---    
-------------------------------------------------------------------------------

library RCPComponentModel;
uses "lib::RCP";


--- contains all profiles that describe components
helper def : AllComponentStereotypes() : Set(UML2!Stereotype) = Set{
	thisModule.perspectiveStereotype, 
	thisModule.viewStereotype,
	thisModule.actionStereotype,
	thisModule.workbenchStereotype,
	thisModule.workbenchActionStereotype,
	thisModule.businessObjectStereotype,
	thisModule.toolbarStereotype,
	thisModule.viewActionStereotype
};

---********************************RCP  Queries************************************---
--- detected view stereotyped classes
helper def: viewStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.viewStereotype))-> debug ('views');
--- detected perspective stereotyped classes
helper def: perspectiveStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.perspectiveStereotype))-> debug ('perspectives');
--- detected action stereotyped classes
helper def: actionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.actionStereotype))-> debug ('actions');
--- detected object contribution stereotyped classes
helper def: objectContributionStereotypedClasses: Sequence(UML2!Class) = 
	thisModule.allINClasses->select(s|s.hasStereotype(thisModule.businessObjectStereotype))-> debug ('objectContributions');

---*************************** RCP Components ******************************---
--- Collects components to be obtained by the transformation, described by:
--- stereotype: that characterises the classes to be included within the component
--- classes: classes to be added to the component, organized by package
--- merge: whether or not to create a single component for all classes (true) or individual components for each class (false)
--- subGroupStereotype: which characterises the components (within nested packages) to be included as aggregations of this component.
helper def : components() : 
	Map (UML2!Stereotype, TupleType (classes:Map (UML2!Package, Sequence (UML2!Class)), merge:Boolean, subGroupStereotype:UML2!Stereotype)) = 
	Map {(thisModule.perspectiveStereotype, 
		  Tuple{classes=thisModule.organizedByPackage(thisModule.perspectiveStereotypedClasses), merge=false, subGroupStereotype=OclUndefined}),
		 (thisModule.viewStereotype, 
		  Tuple{classes=thisModule.organizedByPackage(thisModule.viewStereotypedClasses), merge=false, subGroupStereotype=OclUndefined}),
		 (thisModule.actionStereotype, 
		  Tuple{classes=thisModule.organizedByPackage(thisModule.actionStereotypedClasses), merge=true, subGroupStereotype=OclUndefined}),
		 (thisModule.businessObjectStereotype, 
		  Tuple{classes=thisModule.organizedByPackage(thisModule.objectContributionStereotypedClasses), merge=false, subGroupStereotype=OclUndefined})
	};