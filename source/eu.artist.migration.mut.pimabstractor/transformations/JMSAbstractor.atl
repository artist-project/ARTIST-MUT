-- @atlcompiler emftvm
-- @nsURI UML2=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI XML=http://www.eclipse.org/MoDisco/Xml/0.1.incubation/XML
-- @nsURI profile=http://www.eclipse.org/uml2/4.0.0/UML

-------------------------------------------------------------------------------
--- Copyright (c) 2014 ATOS S.A.
--- All rights reserved. This program and the accompanying materials
--- are made available under the terms of the Eclipse Public License v1.0
--- which accompanies this distribution, and is available at
--- http://www.eclipse.org/legal/epl-v10.html
---
--- Contributors:
---     Jesús Gorroñogoitia - main development
--- 	Burak Karaboga - main development
---		Javier Garcia - main development
---     Elena Garrido 
---
--- Initially developed in the context of ARTIST EU project www.artist-project.eu    
---    
-------------------------------------------------------------------------------

module JMSAbstractor;
create OUT: UML2 from IN: UML2, Plugin: XML, Profile: profile;
uses "lib::JMSMapping";
uses "lib::UMLLib";
uses "lib::PluginLib";
uses "lib::JMS";


---***********************************HELPERS *************************************---


--- it returns the list of stereotypes which are being applied to stereotypes applications
helper def : getStereotypes() : Set(UML2!Stereotype) = thisModule.stereotypeAttributes(thisModule.any())->getKeys();

--- Determines if the package contains any stereotype class
helper context UML2!Package def : containsStereotypedClasses() : Boolean = 
	thisModule.allClassesInvolvedInJMS()-> exists(c | self.containsClass(c));	

--- Determines if the model in the main project model
helper context UML2!Model def : isMainModel() : Boolean = 
	(not self.oclIsUndefined() and self.oclIsTypeOf(UML2!Model) and 
	not (self.name = 'root model') and not (self.name ='externals') and 
	not (self.name = 'sourcesReferences'));


helper context UML2!Enumeration def : isToBeStereotyped() : Boolean = false;
helper context UML2!Interface def : isToBeStereotyped() : Boolean = false;

--- a property is mapped if it does not belong to Eclipse RCP or we can stereotyped it with GUI profile
helper context UML2!Property def : isToBeMapped() : Boolean = 
	--(self.refImmediateComposite().isToBeStereotyped() and 
	not self.getApplicableStereotype().oclIsUndefined();

-- egarrido: add last helper
helper context UML2!Parameter def : isToBeStereotyped() : Boolean = 
   (not self.getApplicableStereotype().oclIsUndefined());

-- egarrido, added last and condition
helper context UML2!Operation def : isToBeMapped() : Boolean = 
	not self.name.oclIsUndefined() and  self.refImmediateComposite().isToBeStereotyped() 
	and	self.member->select(k | k->isToBeStereotyped())->notEmpty();

-- egarrido: not used  'root model::externals::xxx'
-- helper context UML2!Element def: isExternalModel():  Boolean = self.getNearestPackage().qualifiedName.contains('model::externals::');
-- helper context UML2!Element def: isCommonJavaType(): Boolean = self.getNearestPackage().qualifiedName.contains('Common java data types');


-- para imprimir el nombre : (not self.name->debug('name').oclIsUndefined()) 

--helper context UML2!Parameter def : isToBeMapped() : Boolean = 
--	self.refImmediateComposite().isToBeMapped()  and 
--	(not self.type.belongsToEclipse() or not self.getApplicableStereotype().oclIsUndefined()) ;

helper context UML2!Parameter def : isToBeMapped() : Boolean = 
   (self.refImmediateComposite().isToBeMapped()   and not self.getApplicableStereotype().oclIsUndefined()) ;


helper context UML2!Class def : getApplicableStereotype() : UML2!Stereotype = 
	thisModule.queries()->get(thisModule.queries()->getKeys()->select(k | k->includes (self))->asOrderedSet()->first());

helper context UML2!Property def : getApplicableStereotype() : UML2!Stereotype = 
	let matchesInQueries: Set(UML2!Element) = 
		thisModule.queries()->getKeys()->select(k | k->includes (self))->asOrderedSet()
	in
		if (matchesInQueries->isEmpty()) then
			OclUndefined
		else
			thisModule.queries()->get(matchesInQueries->first())
		endif;

helper context UML2!Parameter def : getApplicableStereotype() : UML2!Stereotype = 
	let matchesInQueries: Set(UML2!Element) = 
		thisModule.queries()->getKeys()->select(k | k->includes (self))->asOrderedSet()
	in
		if (matchesInQueries->isEmpty()) then
			OclUndefined
		else
			thisModule.queries()->get(matchesInQueries->first())
		endif;


--EGO-helper context UML2!Stereotype def : getNameAttributes() : TupleType (role:String, classLabel:String, attrName:String) = 
---	thisModule.nameAttributes()->get(self);


helper context UML2!Class def : hasSomethingInvolvedInJMS() : Boolean = 
	thisModule.allClassesInvolvedInJMS()->exists(s |  s = self);

helper context UML2!Class def : isToBeStereotyped() : Boolean = 
	((thisModule.queries()->getKeys()->select(k | k->includes (self))->notEmpty()));
	
helper context UML2!Stereotype def : getNameAttributes() : TupleType (role:String, classLabel:String, attrName:String) = 
	thisModule.nameAttributes()->get(self);

---****************************** END OF HELPERS **********************************---

rule Model {
	from
		s: UML2!Model in IN (s.isMainModel())
	to
		t: UML2!Model (
			name <- s.name,
			visibility <- s.visibility,
			viewpoint <- s.viewpoint,
			eAnnotations <- s.eAnnotations,
			ownedComment <- s.ownedComment,
			clientDependency <- s.clientDependency,
			nameExpression <- s.nameExpression,
			elementImport <- s.elementImport,
			packageImport <- s.packageImport,
			ownedRule <- s.ownedRule,
			templateParameter <- s.templateParameter,
			templateBinding <- s.templateBinding,
			ownedTemplateSignature <- s.ownedTemplateSignature,
			packageMerge <- s.packageMerge,
			packagedElement<-s.packagedElement
		)
	do {
--		--- We apply the profiles
		for (prof in s.getAllAppliedProfiles()){
			t.applyProfile(prof);
		} 		
		--- We apply the profile 
		t.applyProfile(profile!Profile.allInstances().asSequence().first()); 
	}
}


--rule Dependency {
--    from s : UML2!"uml::Dependency" in IN (
--		s.oclIsTypeOf(UML2!"uml::Dependency") 
--		and s.isRelatedWithJMS()
--	)
--    to t : UML2!"uml::Dependency" (
--        __xmiID__ <- s.__xmiID__,
--        name <- s.name,
--        visibility <- s.visibility,
--		client <- s.client -> debug ('client'),
--		supplier <- s.supplier -> debug ('supplier'))
--}

rule Dependency {
    from s : UML2!"uml::Dependency" in IN (s.oclIsTypeOf(UML2!"uml::Dependency") 
 		     and s.belongsToMainModel() 
			 and s.isRelatedWithJMS2())
    to t : UML2!"uml::Dependency" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency -> debug ('clientDependency'),
        nameExpression <- s.nameExpression,
        templateParameter <- s.templateParameter,
        client <- s.client -> debug ('client'),
        supplier <- s.supplier-> debug ('supplier'))
}


rule Package {
    from s : UML2!"uml::Package" in IN (
		s.oclIsTypeOf(UML2!"uml::Package") and 
		s.belongsToMainModel() and
		s.containsStereotypedClasses()
	)
    to t : UML2!"uml::Package" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        URI <- s.URI,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        templateBinding <- s.templateBinding,
        packageMerge <- s.packageMerge,
        packagedElement <- s.packagedElement,
        profileApplication <- s.profileApplication)
		--do{
			--packagedElements <- packagedElements->union (s.refImmediateComposite()->select(e|e.oclIsKingOf(UML2!Dependency))->collect(d|thisModule.createDependency(d))
			--packagedElements <- packagedElements->union (s->select(e|e.oclIsKingOf(UML2!Dependency))->collect(d|thisModule.createDependency(d))
			--packagedElements <- packagedElements->union (s.refImmediateComposite()).packageElements->select(e|e.oclIsKingOf(UML2!Dependency))->collect(d|thisModule.createDependency(d))
		--}
}


abstract rule Class {
    from s : UML2!"uml::Class" in IN (s.oclIsTypeOf(UML2!"uml::Class") and s.belongsToMainModel())
    to t : UML2!"uml::Class" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isAbstract <- s.isAbstract,
        isFinalSpecialization <- s.isFinalSpecialization,
        isActive <- s.isActive,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        templateBinding <- s.templateBinding,
        collaborationUse <- s.collaborationUse,
        generalization <- s.generalization,
        powertypeExtent <- s.powertypeExtent,
        ownedUseCase <- s.ownedUseCase,
        useCase <- s.useCase,
        redefinedClassifier <- s.redefinedClassifier,
        representation <- s.representation,
        substitution <- s.substitution,
        ownedAttribute <- s.ownedAttribute,
        ownedConnector <- s.ownedConnector,
        classifierBehavior <- s.classifierBehavior,
        interfaceRealization <- s.interfaceRealization,
        ownedBehavior <- s.ownedBehavior,
        ownedOperation <- s.ownedOperation,
        nestedClassifier <- s.nestedClassifier,
        ownedReception <- s.ownedReception)	
}

--- Transforms the detected stereotyped classes
rule JMSRelatedClass extends Class{ 
	from
		s: UML2!Class in IN(s.hasSomethingInvolvedInJMS())
	to
		t: UML2!Class
		
	do {
		s.getQualifiedName()->debug('cl fullname');
		--- We apply the stereotype and set some tagged values.
		if (s.isToBeStereotyped()){
			t.applyStereotype(s.getApplicableStereotype()->debug('scl following stereotype')); 
		
			--EGO- Setting stereotype name property defined in nameAttributes
			if (not s.getApplicableStereotype().getNameAttributes().oclIsUndefined())
				t.setValue(s.getApplicableStereotype(), 'name', 
					s.getAttributeForNameInRole(s.getApplicableStereotype().getNameAttributes().get('role'), 
					s.getApplicableStereotype().getNameAttributes().get('classLabel'), 
					s.getApplicableStereotype().getNameAttributes().get('attrName')));
		}
	}
}

--- Transform Class properties whose types detected in queries
rule Property {
    from s : UML2!"uml::Property" in IN (s.oclIsTypeOf(UML2!"uml::Property") and s.isToBeMapped())
    to t : UML2!"uml::Property" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isStatic <- s.isStatic,
        isOrdered <- s.isOrdered,
        isUnique <- s.isUnique,
        isReadOnly <- s.isReadOnly,
        aggregation <- s.aggregation,
        isDerived <- s.isDerived,
        isDerivedUnion <- s.isDerivedUnion,
        isID <- s.isID,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        type <- s.type, 
        lowerValue <- s.lowerValue,
        upperValue <- s.upperValue,
        templateParameter <- s.templateParameter,
        deployment <- s.deployment,
        qualifier <- s.qualifier,
        defaultValue <- s.defaultValue,
        redefinedProperty <- s.redefinedProperty,
        subsettedProperty <- s.subsettedProperty,
        association <- s.association)
		do {

			s.getQualifiedName()->debug('pr fullname');
			s.refImmediateComposite()->debug('pr refImmediateComposite');
			
		}
}

--- Transform Class operations detected in queries
rule Operation {
    from s : UML2!"uml::Operation" in IN (s.isToBeMapped())
    to t : UML2!"uml::Operation" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isStatic <- s.isStatic,
        concurrency <- s.concurrency,
        isAbstract <- s.isAbstract,
        isQuery <- s.isQuery,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        method <- s.method,
        ownedParameter <- s.ownedParameter,
        ownedParameterSet <- s.ownedParameterSet,
        raisedException <- s.raisedException,
        templateParameter <- s.templateParameter,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        templateBinding <- s.templateBinding,
        bodyCondition <- s.bodyCondition,
        postcondition <- s.postcondition,
        precondition <- s.precondition,
        redefinedOperation <- s.redefinedOperation)
}

--- Transform Class operation parameters whose types are detected in queries
rule Parameter {
    from s : UML2!"uml::Parameter" in IN (s.isToBeMapped())
    to t : UML2!"uml::Parameter" (
        __xmiID__ <- s.__xmiID__,
        name <- s.name,
        visibility <- s.visibility,
        isOrdered <- s.isOrdered,
        isUnique <- s.isUnique,
        direction <- s.direction,
        effect <- s.effect,
        isException <- s.isException,
        isStream <- s.isStream,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        type <- s.type,
        templateParameter <- s.templateParameter,
        lowerValue <- s.lowerValue,
        upperValue <- s.upperValue,
        defaultValue <- s.defaultValue,
        parameterSet <- s.parameterSet)
		do {
			s.type.getQualifiedName()->debug('pa fullname');
			s.refImmediateComposite()->debug('pa refImmediateComposite');
		}
}

--- Setting properties of stereotyped applications
--endpoint rule stereotyping(){
--	do{
		-- Setting stereotype properties defined in stereotypeAttributes
--		for (stereotype in thisModule.getStereotypes()){
--			for (element in thisModule.traces.defaultSourceElements
--				->collect(e|e.object)->select(e|thisModule.stereotypeAttributes(element)->get(stereotype).get('stereotypedElements')->includes(e))){
--				element->debug('element');
--				for (attribute in thisModule.stereotypeAttributes(element)->get(stereotype).get('attributes')->getKeys()){
--					element.resolve().setValue(
--						stereotype, attribute, thisModule.stereotypeAttributes(element)->get(stereotype).get('attributes').get(attribute));
--				}
--			}
--		}		
--	}
--}
	